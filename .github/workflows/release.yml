name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_suffix: linux-x64
            
          - name: Windows
            os: ubuntu-latest  # Cross-compile from Linux
            target: x86_64-pc-windows-gnu
            artifact_suffix: windows-x64
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y build-essential pkg-config libasound2-dev libjack-jackd2-dev \
          libx11-dev libgl1-mesa-dev libxrandr-dev libxcursor-dev libxinerama-dev \
          libxi-dev libglu1-mesa-dev libx11-xcb-dev
    
    - name: Install Windows cross-compilation dependencies
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        sudo apt install -y mingw-w64
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-
    
    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-target-
    
    - name: Build plugin
      run: |
        if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
          cargo xtask bundle deepfilter-vst --release --target ${{ matrix.target }}
        else
          cargo xtask bundle deepfilter-vst --release
        fi
    
    - name: Prepare artifacts (Linux)
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        mkdir -p artifacts
        cp target/bundled/deepfilter-vst.clap artifacts/deepfilter-vst-${{ matrix.artifact_suffix }}.clap
        cp -r target/bundled/deepfilter-vst.vst3 artifacts/deepfilter-vst-${{ matrix.artifact_suffix }}.vst3
        
    - name: Prepare artifacts (Windows)
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/bundled/deepfilter-vst.clap artifacts/deepfilter-vst-${{ matrix.artifact_suffix }}.clap
        cp -r target/${{ matrix.target }}/bundled/deepfilter-vst.vst3 artifacts/deepfilter-vst-${{ matrix.artifact_suffix }}.vst3
    
    - name: Create archive
      run: |
        cd artifacts
        tar -czf ../deepfilter-vst-${{ matrix.artifact_suffix }}.tar.gz *
        cd ..
        ls -la *.tar.gz
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deepfilter-vst-${{ matrix.artifact_suffix }}
        path: deepfilter-vst-${{ matrix.artifact_suffix }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
        ls -la release-assets/
    
    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: DeepFilter VST ${{ steps.tag.outputs.tag }}
        body: |
          # DeepFilter VST Plugin Release ${{ steps.tag.outputs.tag }}
          
          A VST3/CLAP audio plugin that uses DeepFilter neural networks for real-time noise reduction.
          
          ## Downloads
          
          - **Linux (x64)**: `deepfilter-vst-linux-x64.tar.gz`
          - **Windows (x64)**: `deepfilter-vst-windows-x64.tar.gz`
          
          ## Installation
          
          ### Linux
          1. Extract the archive
          2. Copy `deepfilter-vst.vst3` to your VST3 directory (usually `~/.vst3/`)
          3. Copy `deepfilter-vst.clap` to your CLAP directory (usually `~/.clap/`)
          
          ### Windows
          1. Extract the archive
          2. Copy `deepfilter-vst.vst3` to your VST3 directory (usually `C:\Program Files\Common Files\VST3\`)
          3. Copy `deepfilter-vst.clap` to your CLAP directory
          
          ## Usage
          
          The plugin provides 5 configurable parameters for fine-tuning noise reduction:
          - Attenuation Limit
          - Min Threshold
          - Max ERB Threshold  
          - Max Threshold
          - Post Filter Beta
          
          Start with default parameters and adjust incrementally for best results.
          
          ## Status
          
          This project is a work in progress. The plugin is functional but may require further testing and optimization for production use.
        draft: true
        files: release-assets/*
        token: ${{ secrets.GITHUB_TOKEN }}